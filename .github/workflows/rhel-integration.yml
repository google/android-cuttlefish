name: RHEL Integration

on:
  workflow_call:
    secrets:
      token:
        description: 'GitHub auth token'
        required: true
    inputs:
      registry:
        description: 'Docker registry hostname'
        default: 'ghcr.io'
        required: false
        type: string
      username:
        description: 'Docker registry username'
        required: true
        type: string
      image:
        description: 'Docker image name'
        required: true
        type: string
      tag:
        description: 'Docker image tag'
        default: latest
        required: false
        type: string
      repository:
        description: 'GitHub repository'
        default: android-cuttlefish
        required: true
        type: string
      platform:
        description: 'The platform to build for'
        default: linux/amd64
        required: false
        type: string
      runner:
        description: 'GitHub actions runner image label'
        default: ${{ VARS.RUNNER_86 }}
        required: false
        type: string

jobs:

  create-image:
    runs-on: ${{ INPUTS.RUNNER }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    env:
      DOCKER_IMAGE: ${{ INPUTS.REGISTRY }}/${{ INPUTS.USERNAME }}/${{ INPUTS.IMAGE }}
    steps:

      - uses: 'docker/login-action@v3'
        id: container-registry
        with:
          registry: 'ghcr.io'
          username: ${{ GITHUB.REPOSITORY_OWNER }}
          password: ${{ SECRETS.GITHUB_TOKEN }}

      # https://github.com/docker/metadata-action
      - uses: 'docker/metadata-action@v5'
        id: metadata
        with:
          images: ${{ ENV.DOCKER_IMAGE }}
          tags: |
            type=sha
            latest

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - uses: 'actions/checkout@v4'
      - uses: 'docker/setup-buildx-action@v3'
      - uses: 'docker/setup-qemu-action@v3'
        if: ${{ INPUTS.PLATFORM != 'linux/amd64' }}
        with: { platforms: arm64 }

      - name: Run shell script, which determines the artifact name
        shell: bash
        id: setup
        run: |
          PLATFORM='${{ INPUTS.PLATFORM }}'
          ARTIFACT_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}-rhel9-${PLATFORM#linux/}-unsigned
          echo "ARTIFACT_PATH=${{ GITHUB.WORKSPACE }}/.rpms" >> $GITHUB_OUTPUT
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "::group::Setup Info"
          echo "::notice file=rhel-integration.yml,line={85},title=Artifact Name: ${ARTIFACT_NAME}"
          echo "::endgroup::"

      # https://github.com/actions/download-artifact
      - uses: 'actions/download-artifact@v4'
        id: restore-rpm-packages
        with:
          name: ${{ STEPS.SETUP.OUTPUTS.ARTIFACT_NAME }}
          path: ${{ STEPS.SETUP.OUTPUTS.ARTIFACT_PATH }}

      - name: List directory ${{ STEPS.SETUP.OUTPUTS.ARTIFACT_PATH }}
        id: list-rpm-packages
        shell: bash
        run: |
          echo "Runner directory: ${{ STEPS.SETUP.OUTPUTS.ARTIFACT_PATH }}"
          ls -la ${{ STEPS.SETUP.OUTPUTS.ARTIFACT_PATH }}
          ls -lan ${{ STEPS.SETUP.OUTPUTS.ARTIFACT_PATH }}

      - uses: 'docker/build-push-action@v6'
        id: build
        with:
          context: .
          target: integration
          file: docker/rhel-integration/Dockerfile
          push: ${{ GITHUB.EVENT_NAME != 'pull_request' }}
          platforms: ${{ INPUTS.PLATFORM }}
          labels: ${{ STEPS.METADATA.OUTPUTS.LABELS }}
          tags: ${{ STEPS.METADATA.OUTPUTS.TAGS }}
          build-args: |
            LINUX_IMAGE=${{ VARS.RHEL_LINUX_IMAGE }}
            GITHUB_USER=${{ GITHUB.REPOSITORY_OWNER }}
            GITHUB_REPO=${{ STEPS.SETUP.OUTPUTS.REPOSITORY_NAME }}
            GITHUB_BRANCH=${{ GITHUB.HEAD_REF || GITHUB.REF_NAME }}

      # Note: The digest comes from `buildx`, not the metadata.
      # https://github.com/actions/attest-build-provenance
      - uses: 'actions/attest-build-provenance@v2'
        with:
          subject-name: ${{ ENV.DOCKER_IMAGE }}
          subject-digest: ${{ STEPS.BUILD.OUTPUTS.DIGEST }}
          push-to-registry: true
