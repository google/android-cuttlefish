name: RPM Builder

on:
  push:
  workflow_call:
    inputs:
      enable-docker-cache:
        required: false
        type: boolean
        default: false

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: ${{ GITHUB.ACTOR }}/rpm-builder

jobs:

  build-docker-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:

      # https://github.com/actions/checkout
      - name: Get latest code
        uses: actions/checkout@v4

      - name: Setup Buildx
        id: buildx-setup
        if: ${{ inputs.enable-docker-cache }}
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver: 'docker-container'
          driver-opts: 'image=moby/buildkit:master,network=host'

      # https://github.com/docker/login-action
      - name: Log in to the Container registry
        id: container-registry
        uses: 'docker/login-action@v3'
        with:
          registry: ${{ ENV.DOCKER_REGISTRY }}
          username: ${{ GITHUB.ACTOR }}
          password: ${{ SECRETS.GITHUB_TOKEN }}

      # https://github.com/docker/metadata-action
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: 'docker/metadata-action@v5'
        with:
          images: ${{ ENV.DOCKER_REGISTRY }}/${{ ENV.DOCKER_IMAGE }}
          tags: ${{ ENV.DOCKER_IMAGE }}:latest

      # https://github.com/marketplace/actions/build-and-push-docker-images
      # docker build --target builder -t syslogic/rpm-builder:latest .
      # docker build --target integration -t syslogic/rpm-integration:latest .
      # docker build --target orchestration -t syslogic/rpm-orchestration:latest .
      - name: Build and push Docker image
        if: ${{ !inputs.enable-docker-cache }}
        id: push
        uses: 'docker/build-push-action@v6'
        with:
          context: .
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          file: docker/rpm-builder/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          outputs: type=docker,dest=${{ RUNNER.TEMP }}/myimage.tar

      - name: Build and push Docker images with cache
        if: ${{ inputs.enable-docker-cache }}
        id: push-image-cached
        uses: 'docker/build-push-action@v6'
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: docker/rpm-builder/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

      # https://github.com/actions/attest-build-provenance
      - name: Generate artifact attestation
        uses: 'actions/attest-build-provenance@v2'
        with:
          subject-name: ${{ ENV.DOCKER_REGISTRY }}/${{ ENV.DOCKER_IMAGE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
    outputs:
      docker-image: "${{ ENV.DOCKER_REGISTRY }}/${{ ENV.DOCKER_IMAGE }}:latest"

  build-rpm-specs:
    needs: build-docker-image
    uses: ./.github/workflows/reusable-docker.yml
    with:
      docker-image: ${{ needs.build-docker-image.outputs.docker-image }}
      entry-point: "/root/buildscript.sh"
    secrets:
      token: ${{ SECRETS.GITHUB_TOKEN }}

  test-rpm-packages:
    needs: build-rpm-specs
    uses: ./.github/workflows/reusable-docker.yml
    with:
      docker-image: ${{ needs.build-docker-image.outputs.docker-image }}
      entry-point: "/root/testscript.sh"
    secrets:
      token: ${{ SECRETS.GITHUB_TOKEN }}
