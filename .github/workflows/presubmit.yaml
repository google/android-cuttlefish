name: Presubmit 

on:
  pull_request:
  push:
    branches-ignore:
      - main  # push events to main branch occur after PRs are merged, when the same checks were run


concurrency:
  # limits the workflow to a single run per branch/PR
  group: ${{ github.workflow }}-${{ github.ref }}
  # previous runs are cancelled when a new run is started
  cancel-in-progress: true

jobs:
  staticcheck:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        dir: ["e2etests", "frontend/src/host_orchestrator", "frontend/src/libhoclient", "frontend/src/liboperator", "frontend/src/operator"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Install dependencies
      uses: actions/setup-go@v3
      with:
        go-version: '1.23.1'
    - run: go version
    - name: Staticcheck
      uses: dominikh/staticcheck-action@v1.3.1
      with:
        version: "latest"
        install-go: false
        working-directory: ${{ matrix.dir }}
  run-frontend-unit-tests:
    runs-on: ubuntu-22.04
    container:
      image: debian@sha256:9258a75a7e4323c9e5562b361effc84ee747920116d8adfc98a465a5cdc9150e # debian:bookworm-20250407 (amd64)
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Setup apt
      run: apt update -y && apt upgrade -y
    - name: Install dependencies
      run: apt install -y git golang
    - name: Go version
      run: go version
    - name: Run go tests
      shell: bash
      run: |
        go_projects=("host_orchestrator" "libhoclient" "liboperator" "operator")
        for item in "${go_projects[@]}"; do
          pushd "frontend/src/${item}"
          go test ./...
          popd
        done
  run-cvd-unit-tests:
    runs-on: ubuntu-22.04-4core
    container:
      image: debian@sha256:9258a75a7e4323c9e5562b361effc84ee747920116d8adfc98a465a5cdc9150e # debian:bookworm-20250407 (amd64)
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Setup apt
      run: apt update -y && apt upgrade -y
    - name: Install dependencies
      run: apt install -y git clang libcurl4-openssl-dev clang-tidy libtinfo5 xxd cmake liblzma-dev libvpx-dev libopus-dev libaom-dev autoconf libtool nasm
    - name: Install bazel
      run: bash tools/buildutils/installbazel.sh
    - name: Run unit tests
      run: cd base/cvd && bazel test --sandbox_writable_path=$HOME --test_output=errors ...
    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cvd-unit-tests-logs
        path: base/cvd/bazel-out/k8-fastbuild/testlogs
  build-debian-package:
    runs-on: ubuntu-22.04-4core
    container:
      image: debian@sha256:823849b88ae7e9b6ceb605fbdf51566499c234a9cfca8da1e4f22234fd65a09c # debian:bullseye-20250317 (amd64)
    steps:
    - name: Common bazel setup
      uses: bazel-contrib/setup-bazel@f3f50ea6791b9b0f4c4eeabba4507422426462f5 #aka 0.9.1
      with:
        bazelisk-cache: true # Avoid downloading Bazel every time.
        disk-cache: ${{ github.workflow }} # Store build cache per workflow.
        repository-cache: true # Share repository cache between workflows.
    - name: Check for dockerenv file
      run: (ls /.dockerenv && echo 'Found dockerenv') || (echo 'No dockerenv')
    - name: setup apt
      run: apt update -y && apt upgrade -y
    - name: install debuild dependencies
      run: apt install -y git devscripts config-package-dev debhelper-compat golang protobuf-compiler nasm
    - name: go version
      run: go version
    - name: checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
      with:
        path: "android-cuttlefish"
    - name: install bazel
      run: bash android-cuttlefish/tools/buildutils/installbazel.sh
    - name: install package build dependencies
      run: cd android-cuttlefish/base && mk-build-deps -i -t 'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'
    - name: build base debian package
      run: cd android-cuttlefish/base && debuild -i -us -uc -b
    - name: install base debian package
      run: dpkg -i android-cuttlefish/cuttlefish-base_*_*64.deb || apt-get install -f -y
    - name: build frontend debian packages
      run: cd android-cuttlefish/frontend && debuild -i -us -uc -b
    - name: install user debian package
      run: dpkg -i android-cuttlefish/cuttlefish-user_*_*64.deb || apt-get install -f -y
    - name: Build debs.tar
      run: find . -name 'cuttlefish-*.deb' -print0 | tar -cvf debs.tar --null --files-from -
    - name: Publish debs.tar
      uses: actions/upload-artifact@v4
      with:
        name: debs
        path: debs.tar
  e2e-tests-orchestration-build-image:
    runs-on: ubuntu-24.04
    needs: [build-debian-package]
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Download cuttlefish debs
      uses: actions/download-artifact@v4
      with:
        name: debs
        github-token: ${{ github.token }}
    - name: Build image
      run: |
        tar -xvf debs.tar && mv android-cuttlefish/cuttlefish*.deb .
        sudo podman info
        sudo podman build -f "tools/testutils/cw/Containerfile" --tag "android-cuttlefish-e2etest:latest" .
        sudo podman save --quiet -o android-cuttlefish-e2etest.tar localhost/android-cuttlefish-e2etest
    - name: Upload image
      uses: actions/upload-artifact@v4
      with:
        name: android-cuttlefish-e2etest-image-tar
        path: android-cuttlefish-e2etest.tar
  e2e-tests-orchestration-runner-1:
    runs-on: ubuntu-24.04
    needs: [e2e-tests-orchestration-build-image]
    steps:
      - name: Checkout repository
        uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
      - name: Run tests
        uses: ./.github/actions/run-cw-sharded-e2e-test
        with:
          runner-index: 1
          runners-total: 3
  e2e-tests-orchestration-runner-2:
    runs-on: ubuntu-24.04
    needs: [e2e-tests-orchestration-build-image]
    steps:
      - name: Checkout repository
        uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
      - name: Run tests
        uses: ./.github/actions/run-cw-sharded-e2e-test
        with:
          runner-index: 2
          runners-total: 3
  e2e-tests-orchestration-runner-3:
    runs-on: ubuntu-24.04
    needs: [e2e-tests-orchestration-build-image]
    steps:
      - name: Checkout repository
        uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
      - name: Run tests
        uses: ./.github/actions/run-cw-sharded-e2e-test
        with:
          runner-index: 3
          runners-total: 3
  e2e-tests-orchestration-runner-special:
    runs-on: ubuntu-24.04
    needs: [e2e-tests-orchestration-build-image]
    steps:
    - name: Free disk space
      uses: jlumbroso/free-disk-space@v1.3.1
      with:
        tool-cache: true
    - name: checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: download image
      uses: actions/download-artifact@v4
      with:
        name: android-cuttlefish-e2etest-image-tar
        github-token: ${{ github.token }}
    - name: Run tests
      run: |
        sudo podman info
        sudo podman load --quiet -i android-cuttlefish-e2etest.tar && rm android-cuttlefish-e2etest.tar
        mkdir -p -m 777 /tmp/cw_bazel
        sudo podman run --name tester -d --privileged --pids-limit=8192 -v /tmp/cw_bazel:/tmp/cw_bazel -v .:/src/workspace -w /src/workspace/e2etests --add-host="metadata.google.internal:127.0.0.1" android-cuttlefish-e2etest:latest
        sudo podman exec --user=testrunner -it tester bazel --output_user_root=/tmp/cw_bazel/output test //orchestration/create_with_gce_credentials_test:create_with_gce_credentials_test_test
    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-tests-orchestration-runner-special-testlogs
        path: /tmp/cw_bazel/output/5d2d32753412f49aca3a92f1e1e5e35e/execroot/_main/_main/bazel-out/k8-fastbuild/testlogs
    - name: Used disk space
      run: |
        df -h
  docker-image-check:
    runs-on: ubuntu-22.04
    steps:
    - name: Free disk space
      uses: jlumbroso/free-disk-space@v1.3.1
      with:
        tool-cache: true
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Install bazel
      run: sudo bash tools/buildutils/installbazel.sh
    - name: Run check
      shell: bash
      run: |
        # TODO(b/420987840): Reuse deb packages created in `build-debian-package` job.
        ./docker/image-builder.sh -d
        docker images
        sudo docker run --privileged -d -p 2080:2080 cuttlefish-orchestration:latest
        # Wait for HO service to start.
        sleep 10s
        res=$( curl -v http://localhost:2080/cvds )
        echo "response: ${res}"
        test "${res}" = '{"cvds":[]}'
        # Run create_from_images_zip_test e2e tests
        cd e2etests
        bazel test orchestration/create_from_images_zip_test:create_from_images_zip_test_test


