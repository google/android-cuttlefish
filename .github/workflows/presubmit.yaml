name: Presubmit 

on:
  pull_request:
  push:
    branches-ignore:
      - main  # push events to main branch occur after PRs are merged, when the same checks were run

jobs:
  staticcheck:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        dir: ["e2etests", "frontend/src/host_orchestrator", "frontend/src/libhoclient", "frontend/src/liboperator", "frontend/src/operator"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Install dependencies
      uses: actions/setup-go@v3
      with:
        go-version: '1.23.1'
    - run: go version
    - name: Staticcheck
      uses: dominikh/staticcheck-action@v1.3.1
      with:
        version: "latest"
        install-go: false
        working-directory: ${{ matrix.dir }}
  build-orchestrator:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Install dependencies
      uses: actions/setup-go@v3
      with:
        go-version: '1.17.13'
    - run: go version
    - name: Vet Test Build
      run: cd frontend/src/host_orchestrator && go vet ./... && go test ./... && go build ./...
  build-debian-package:
    runs-on: ubuntu-22.04-4core
    container:
      image: debian@sha256:823849b88ae7e9b6ceb605fbdf51566499c234a9cfca8da1e4f22234fd65a09c # debian:bullseye-20250317 (amd64)
    if: ${{ always() && needs.build-orchestrator.result == 'success' }}
    needs: [build-orchestrator]
    steps:
    - name: Common bazel setup
      uses: bazel-contrib/setup-bazel@f3f50ea6791b9b0f4c4eeabba4507422426462f5 #aka 0.9.1
      with:
        bazelisk-cache: true # Avoid downloading Bazel every time.
        disk-cache: ${{ github.workflow }} # Store build cache per workflow.
        repository-cache: true # Share repository cache between workflows.
    - name: Check for dockerenv file
      run: (ls /.dockerenv && echo 'Found dockerenv') || (echo 'No dockerenv')
    - name: setup apt
      run: apt update -y && apt upgrade -y
    - name: install debuild dependencies
      run: apt install -y git devscripts config-package-dev debhelper-compat golang protobuf-compiler
    - name: go version
      run: go version
    - name: checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
      with:
        path: "android-cuttlefish"
    - name: Install bazel
      run: bash android-cuttlefish/tools/buildutils/installbazel.sh
    - name: install package build dependencies
      run: cd android-cuttlefish/base && mk-build-deps -i -t 'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'
    - name: build base debian package
      run: cd android-cuttlefish/base && debuild -i -us -uc -b
    - name: install base debian package
      run: dpkg -i android-cuttlefish/cuttlefish-base_*_*64.deb || apt-get install -f -y
    - name: build frontend debian packages
      run: cd android-cuttlefish/frontend && debuild -i -us -uc -b
    - name: install user debian package
      run: dpkg -i android-cuttlefish/cuttlefish-user_*_*64.deb || apt-get install -f -y
    - name: Build debs.tar
      run: find . -name 'cuttlefish-*.deb' -print0 | tar -cvf debs.tar --null --files-from -
    - name: Publish debs.tar
      uses: actions/upload-artifact@v4
      with:
        name: debs
        path: debs.tar
  build-cvd:
    runs-on: ubuntu-22.04-4core
    container:
      image: debian@sha256:9258a75a7e4323c9e5562b361effc84ee747920116d8adfc98a465a5cdc9150e # debian:bookworm-20250407 (amd64)
    steps:
    - name: Common bazel setup
      uses: bazel-contrib/setup-bazel@f3f50ea6791b9b0f4c4eeabba4507422426462f5 #aka 0.9.1
      with:
        bazelisk-cache: true # Avoid downloading Bazel every time.
        disk-cache: ${{ github.workflow }} # Store build cache per workflow.
        repository-cache: true # Share repository cache between workflows.
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Setup apt
      run: apt update -y && apt upgrade -y
    - name: Install dependencies
      run: apt install -y git clang libcurl4-openssl-dev clang-tidy libtinfo5 xxd cmake liblzma-dev libvpx-dev libopus-dev libaom-dev autoconf libtool
    - name: Install bazel
      run: bash tools/buildutils/installbazel.sh
    - name: Build cvd
      run: cd base/cvd && bazel build --verbose_failures ...
    - name: Test cvd
      run: cd base/cvd && bazel test --sandbox_writable_path=$HOME --test_output=errors ...
    - name: Upload test logs
      uses: actions/upload-artifact@v4
      with:
        name: testlogs
        path: bazel-testlogs
  e2e-tests-orchestration:
    runs-on: ubuntu-22.04-4core
    steps:
      # Do not reuse bazel cache among `e2e-tests-orchestration` runs.
      #
      # Current docker image bazel target: "@images//:orchestration_image_dev_tar" is based
      # on an umbrella bash script and does not depend on smaller bazel targets, hence changes
      # in cvd or host orchestrator code won't trigger building a new image.
    - name: Free space
      run: |
        echo "disk space before cleanup:"
        df -h
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /usr/local/lib/android/sdk/ndk
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /opt/ghc
        sudo apt-get clean
        echo "disk space after cleanup:"
        df -h
    - name: Check kvm
      run: |
        ls /dev/kvm
    - name: checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Install bazel
      run: sudo bash tools/buildutils/installbazel.sh
    - name: bazel version
      run: bazel version
    - name: Run orchestration e2e tests
      run: |
        cd e2etests
        # Run orchestration e2e tests serially due lack of space in Github standard runners.
        #
        # Overall action timing breakdown:
        #
        # [614 / 616] Executing genrule @@images//docker/debs-builder-docker:debs_tar [for tool]; 608s linux-sandbox
        # [615 / 616] Executing genrule @@images//docker:orchestration_image_dev_tar; 11s linux-sandbox
        # //orchestration:create_fixed_build_id_and_target                         PASSED in 99.9s
        # //orchestration:create_local_image                                       PASSED in 92.4s
        #
        # The tests are running under 2 min, it's ok for now to execute them serially. The action's
        # bottleneck is building the debian packages: `@@images//docker/debs-builder-docker:debs_tar`.
        bazel query 'kind(go_test, //orchestration/...) except attr(tags, host-ready, kind("go_test", //...))' | xargs bazel test --sandbox_writable_path=$HOME --test_output=errors --local_test_jobs=1 --test_timeout=480
    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: testlogs
        path: e2etests/bazel-testlogs
  e2e-tests-orchestration-runner:
    runs-on: ubuntu-24.04
    if: ${{ always() && needs.build-debian-package.result == 'success' }}
    needs: [build-debian-package]
    steps:
    - name: Check kvm
      run: |
        ls -la /dev/kvm
    - name: Free space
      run: |
        echo "disk space before cleanup:"
        df -h
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /usr/local/lib/android/sdk/ndk
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /opt/ghc
        sudo apt-get clean
        echo "disk space after cleanup:"
        df -h
    - name: checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: download debs
      uses: actions/download-artifact@v4
      with:
        name: debs
        github-token: ${{ github.token }}
    - name: Run tests
      run: |
        tar -xvf debs.tar && mv android-cuttlefish/cuttlefish*.deb .
        sudo podman info
        sudo podman build -f "tools/testutils/cw/Containerfile" --tag "android-cuttlefish-e2etest:latest" .
        mkdir -p -m 777 /tmp/cw_bazel
        sudo podman run --name tester -d  --privileged --pids-limit=8192 -v /tmp/cw_bazel:/tmp/cw_bazel -v .:/src/workspace -w /src/workspace/e2etests android-cuttlefish-e2etest:latest
        sudo podman exec --user=testrunner -it tester bazel --output_user_root=/tmp/cw_bazel/output test //orchestration/journal_gatewayd_test:journal_gatewayd_test_test
    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-tests-orchestration-runner-testlogs
        path: /tmp/cw_bazel/output/5d2d32753412f49aca3a92f1e1e5e35e/execroot/_main
  e2e-tests-orchestration-runner-special:
    runs-on: ubuntu-24.04
    if: ${{ always() && needs.build-debian-package.result == 'success' }}
    needs: [build-debian-package]
    steps:
    - name: Free space
      run: |
        echo "disk space before cleanup:"
        df -h
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /usr/local/lib/android/sdk/ndk
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /opt/ghc
        sudo apt-get clean
        echo "disk space after cleanup:"
        df -h
    - name: checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: download debs
      uses: actions/download-artifact@v4
      with:
        name: debs
        github-token: ${{ github.token }}
    - name: Run tests
      run: |
        tar -xvf debs.tar && mv android-cuttlefish/cuttlefish*.deb .
        sudo podman info
        sudo podman build -f "tools/testutils/cw/Containerfile" --tag "android-cuttlefish-e2etest:latest" .
        mkdir -p -m 777 /tmp/cw_bazel
        sudo podman run --name tester -d --privileged --pids-limit=8192 -v /tmp/cw_bazel:/tmp/cw_bazel -v .:/src/workspace -w /src/workspace/e2etests --add-host="metadata.google.internal:127.0.0.1" android-cuttlefish-e2etest:latest
        sudo podman exec --user=testrunner -it tester bazel --output_user_root=/tmp/cw_bazel/output test //orchestration/create_with_gce_credentials_test:create_with_gce_credentials_test_test
    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-tests-orchestration-runner-special-testlogs
        path: /tmp/cw_bazel/output/5d2d32753412f49aca3a92f1e1e5e35e/execroot/_main

