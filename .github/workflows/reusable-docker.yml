name: Reusable Docker Container Run

on:
  workflow_call:
    secrets:
      token:
        required: true
    inputs:
      registry:
        default: 'ghcr.io'
        required: false
        type: string
      username:
        required: true
        type: string
      image:
        required: true
        type: string
      tag:
        default: latest
        required: false
        type: string
      platform:
        default: linux/amd64
        required: false
        type: string
    outputs:
      builder:
        value: ${{ jobs.docker-run.outputs.builder }}
        description: "Build output"
      testing:
        value: ${{ jobs.docker-run.outputs.testing }}
        description: "Package test output"
      integration:
        value: ${{ jobs.docker-run.outputs.integration }}
        description: "Integration output"
      orchestration:
        value: ${{ jobs.docker-run.outputs.orchestration }}
        description: "Orchestration output"
jobs:

  docker-run:
    runs-on: ubuntu-latest
    outputs:
      builder: ${{ steps.build-rpm-packages.outputs.result }}
      testing: ${{ steps.test-rpm-packages.outputs.result }}
      integration: ${{ steps.test-integration.outputs.result }}
      orchestration: ${{ steps.test-orchestration.outputs.result }}

    steps:

      # https://github.com/docker/login-action
      - name: Log in to the Container registry
        uses: 'docker/login-action@v3'
        id: container-registry
        with:
          registry: ${{ INPUTS.REGISTRY }}
          username: ${{ INPUTS.USERNAME }}
          password: ${{ SECRETS.TOKEN }}

      # https://docs.docker.com/reference/cli/docker/container/run/
      # https://docs.docker.com/reference/cli/docker/container/cp/
      # --entrypoint ${{ INPUTS.ENTRY-POINT }} cannot be changed with GitHub docker.
      - name: Run docker and somehow extract the archive from the volume.
        if: ${{ contains(INPUTS.IMAGE, 'builder') && !contains(INPUTS.PLATFORM, 'linux/arm64') }}
        id: build-rpm-packages
        shell: bash
        env:
          RPM_PLATFORM: ${{ INPUTS.PLATFORM }}
          DOCKER_IMAGE: ${{ INPUTS.REGISTRY }}/${{ INPUTS.USERNAME }}/${{ INPUTS.IMAGE }}:${{ INPUTS.TAG }}
          DOCKER_OPTIONS: '--name rpm-builder --attach STDOUT --attach STDERR --quiet'
        run: |
          PLATFORM=linux/amd64
          # docker run $DOCKER_OPTIONS --env RPM_PLATFORM=$RPM_PLATFORM $$DOCKER_IMAGE
          docker run $DOCKER_OPTIONS $DOCKER_IMAGE >> $GITHUB_STEP_SUMMARY
          MOUNT_POINT=$(docker volume ls --filter driver="local" --format '{{.Mountpoint}}')
          VOLUME_HASH=$(docker volume ls --filter driver="local" --format '{{.Name}}')          
          DIRECTORY=/var/lib/docker/volumes/$VOLUME_HASH/_data
          CID=`docker ps -aqf "name=^rpm-builder$"`
          
          echo Listing container $CID with attached volume: $DIRECTORY
          echo Mountpoint value: $MOUNT_POINT
          
          # TODO: Finds nothing, because the entrypoint.sh does not seem to execute.
          # docker cp $CID:/root/android-cuttlefish-rpm.tar.gz ${{ RUNNER.TEMP }}
          # docker cp rpm-builder:/root/android-cuttlefish-rpm.tar.gz ${{ RUNNER.TEMP }}
          sudo ls -la $DIRECTORY
          cp $DIRECTORY/android-cuttlefish-rpm.tar.gz ${{ RUNNER.TEMP }}
          
          docker rm rpm-builder
          echo "result=ok" >> $GITHUB_OUTPUT

      # https://github.com/actions/upload-artifact
      - name: Retain Artifacts (*.rpm)
        uses: 'actions/upload-artifact@v4'
        id: retain-rpm-packages
        if: ${{ contains(INPUTS.IMAGE, 'builder') && !contains(INPUTS.PLATFORM, 'linux/arm64') }}
        with:
          path: ${{ RUNNER.TEMP }}/*.tar.gz
          name: android-cuttlefish-rhel-${{ INPUTS.PLATFORM }}
          retention-days: 14

      # https://docs.docker.com/reference/cli/docker/container/run/
      - name: Run package tests
        if: ${{ contains(INPUTS.IMAGE, 'testing') }}
        id: test-rpm-packages
        shell: bash
        env:
          DOCKER_IMAGE: ${{ INPUTS.REGISTRY }}/${{ INPUTS.USERNAME }}/${{ INPUTS.IMAGE }}:${{ INPUTS.TAG }}
          DOCKER_OPTIONS: '--name rpm-testing --attach STDOUT --attach STDERR'
        run: |
          docker run $DOCKER_OPTIONS $DOCKER_IMAGE >> $GITHUB_STEP_SUMMARY
          docker rm rpm-testing
          echo "result=ok" >> $GITHUB_OUTPUT

      # https://docs.docker.com/reference/cli/docker/container/run/
      - name: Run integration test
        if: ${{ contains(INPUTS.IMAGE, 'integration') }}
        id: test-integration
        shell: bash
        env:
          DOCKER_IMAGE: ${{ INPUTS.REGISTRY }}/${{ INPUTS.USERNAME }}/${{ INPUTS.IMAGE }}:${{ INPUTS.TAG }}
          DOCKER_OPTIONS: '--name rhel-integration --attach STDOUT --attach STDERR --quiet'
        run: |
          docker run $DOCKER_OPTIONS $DOCKER_IMAGE >> $GITHUB_STEP_SUMMARY
          echo "result=ok" >> $GITHUB_OUTPUT

      # https://docs.docker.com/reference/cli/docker/container/run/
      - name: Run orchestration test
        if: ${{ contains(INPUTS.DOCKER-IMAGE, 'orchestration') }}
        id: test-orchestration
        shell: bash
        env:
          DOCKER_IMAGE: ${{ INPUTS.REGISTRY }}/${{ INPUTS.USERNAME }}/${{ INPUTS.IMAGE }}:${{ INPUTS.TAG }}
          DOCKER_OPTIONS: '--name rhel-orchestration --attach STDOUT --attach STDERR --quiet'
        run: |
          docker run $DOCKER_OPTIONS $DOCKER_IMAGE >> $GITHUB_STEP_SUMMARY
          echo "result=ok" >> $GITHUB_OUTPUT
