name: Reusable Docker Container Run

on:
  workflow_call:
    secrets:
      token:
        required: true
    inputs:
      registry:
        default: 'ghcr.io'
        required: false
        type: string
      username:
        required: true
        type: string
      image:
        required: true
        type: string
      tag:
        default: latest
        required: false
        type: string
      runner:
          default: ubuntu-latest
          required: false
          type: string
      platform:
        default: linux/amd64
        required: false
        type: string

jobs:

  docker-run:
    runs-on: ${{ INPUTS.RUNNER }}
    env:
      DOCKER_OPTIONS: '--name ${{ INPUTS.IMAGE }} --platform ${{ INPUTS.PLATFORM }} --attach STDERR --attach STDOUT --quiet'
      DOCKER_IMAGE: ${{ INPUTS.REGISTRY }}/${{ INPUTS.USERNAME }}/${{ INPUTS.IMAGE }}:${{ INPUTS.TAG }}
      DOCKER_MOUNTS: '--volume ${{ RUNNER.TEMP }}/.rpms:/home/github/.rpms'
      # The images to build with are being defined right here.
      BUILD_ARGS_X86: '--build-arg LINUX_IMAGE=rockylinux/rockylinux:9.5'
      BUILD_ARGS_ARM: '--build-arg LINUX_IMAGE=arm64v8/rockylinux:9.3'
    outputs:
      BUILD_ARGS: string
    steps:

      - name: Set up build args.
        id: build-args
        shell: bash
        run: |
          [ "${{ INPUTS.PLATFORM }}" = "linux/arm64" ] &&  echo BUILD_ARGS=${{ ENV.BUILD_ARGS_X86 }} >> $GITHUB_OUTPUT
          [ "${{ INPUTS.PLATFORM }}" = "linux/amd64" ] &&  echo BUILD_ARGS=${{ ENV.BUILD_ARGS_ARM }} >> $GITHUB_OUTPUT

      # https://github.com/docker/login-action
      - name: Log in to the Container registry
        uses: 'docker/login-action@v3'
        id: container-registry
        with:
          registry: ${{ INPUTS.REGISTRY }}
          username: ${{ INPUTS.USERNAME }}
          password: ${{ SECRETS.TOKEN }}

      # Need to check out once again, in order to utilize `hashFiles()`.
      - uses: 'actions/checkout@v4'

      - name: Restore bazel cache
        if: ${{ contains(INPUTS.IMAGE, 'builder') }}
        id: bazel-cache-restore
        uses: 'actions/cache/restore@v4'
        with:
          key: bazel-cache-${{ RUNNER.ARCH }}-${{ hashFiles('./base/cvd/**.bazel') }}
          restore-keys: bazel-cache-${{ RUNNER.ARCH }}-
          path: ${{ RUNNER.TEMP }}/.cache

      # https://docs.docker.com/reference/cli/docker/container/run/
      # https://docs.docker.com/reference/cli/docker/container/cp/
      # --entrypoint ${{ INPUTS.ENTRY-POINT }} cannot be changed with GitHub docker.
      - name: Run ${{ INPUTS.REGISTRY }}/${{ INPUTS.USERNAME }}/${{ INPUTS.IMAGE }}:${{ INPUTS.TAG }}
        if: ${{ contains(INPUTS.IMAGE, 'builder') }}
        id: build-rpm-packages
        shell: bash
        env:
          DOCKER_MOUNTS: '--volume ${{ RUNNER.TEMP }}/.cache:/home/runner/.cache --volume ${{ RUNNER.TEMP }}/.rpms:/home/runner/.rpms'
          BUILD_ARGS: ${{ steps.build-args.outputs.BUILD_ARGS }}
        run: |
          mkdir -p ${{ RUNNER.TEMP }}/.rpms
          mkdir -p ${{ RUNNER.TEMP }}/.cache
          docker run $DOCKER_OPTIONS $DOCKER_MOUNTS $BUILD_ARGS $DOCKER_IMAGE

      - name: List ${{ RUNNER.TEMP }}
        if: ${{ contains(INPUTS.IMAGE, 'builder') }}
        id: list-rpm-packages
        shell: bash
        run: |
          printf "Ubuntu mount-point: %s" "${{ RUNNER.TEMP }}/.rpms"
          ls -la ${{ RUNNER.TEMP }}/.rpms
          ls -lan ${{ RUNNER.TEMP }}/.rpms

      # https://github.com/actions/upload-artifact
      - name: Retain Artifacts (*.rpm)
        if: ${{ contains(INPUTS.IMAGE, 'builder') && success() }}
        uses: 'actions/upload-artifact@v4'
        id: retain-rpm-packages
        with:
          name: android-cuttlefish-rhel9-${{ RUNNER.ARCH }}
          path: '${{ RUNNER.TEMP }}/.rpms/**'
          retention-days: 14

      # https://github.com/actions/cache
      - name: Save bazel cache
        if: ${{ contains(INPUTS.IMAGE, 'builder') }}
        id: bazel-cache-save
        uses: 'actions/cache/save@v4'
        with:
          key: ${{ steps.bazel-cache-restore.outputs.cache-primary-key }}
          path: ${{ RUNNER.TEMP }}/.cache

      # https://docs.docker.com/reference/cli/docker/container/run/
      - name: Build integration image
        if: ${{ contains(INPUTS.IMAGE, 'integration') }}
        id: build-integration
        shell: bash
        env:
          DOCKER_MOUNTS: '--volume ${{ RUNNER.TEMP }}/.rpms:/home/runner/.rpms'
          BUILD_ARGS: ${{ steps.build-args.outputs.BUILD_ARGS }}
        run: |
          mkdir -p ${{ RUNNER.TEMP }}/.rpms
          docker run $DOCKER_OPTIONS $DOCKER_MOUNTS $BUILD_ARGS $DOCKER_IMAGE

      # https://docs.docker.com/reference/cli/docker/container/run/
      - name: Build orchestration image
        if: ${{ contains(INPUTS.DOCKER-IMAGE, 'orchestration') }}
        id: build-orchestration
        shell: bash
        env:
          DOCKER_MOUNTS: '--volume ${{ RUNNER.TEMP }}/.rpms:/home/runner/.rpms'
          BUILD_ARGS: ${{ steps.build-args.outputs.BUILD_ARGS }}
        run: |
          mkdir -p ${{ RUNNER.TEMP }}/.rpms
          docker run $DOCKER_OPTIONS $DOCKER_MOUNTS $BUILD_ARGS $DOCKER_IMAGE
