load("//cuttlefish/bazel:rules.bzl", "cf_cc_binary", "cf_cc_library", "cf_cc_test")

package(
    default_visibility = ["//:android_cuttlefish"],
)

exports_files(glob(["etc/**"]))

cf_cc_library(
    name = "command_parser",
    srcs = ["command_parser.cpp"],
    hdrs = ["command_parser.h"],
    deps = [
        "//libbase",
    ],
)

cf_cc_test(
    name = "command_parser_test",
    srcs = ["unittest/command_parser_test.cpp"],
    deps = [
        "//cuttlefish/host/commands/modem_simulator:command_parser",
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)

cf_cc_library(
    name = "device_config",
    srcs = ["cf_device_config.cpp"],
    hdrs = ["device_config.h"],
    deps = [
        "//cuttlefish/host/libs/config:cuttlefish_config",
    ],
)

cf_cc_library(
    name = "modem_simulator_lib",
    srcs = [
        "call_service.cpp",
        "channel_monitor.cpp",
        "data_service.cpp",
        "misc_service.cpp",
        "modem_service.cpp",
        "modem_simulator.cpp",
        "network_service.cpp",
        "nvram_config.cpp",
        "sim_service.cpp",
        "sms_service.cpp",
        "stk_service.cpp",
        "sup_service.cpp",
    ],
    hdrs = [
        "call_service.h",
        "channel_monitor.h",
        "data_service.h",
        "misc_service.h",
        "modem_service.h",
        "modem_simulator.h",
        "network_service.h",
        "network_service_constants.h",
        "nvram_config.h",
        "sim_service.h",
        "sms_service.h",
        "stk_service.h",
        "sup_service.h",
    ],
    clang_tidy_enabled = False,  # TODO(b/405163202): Enable back once migration is completed.
    copts = [
        "-Wall",
        "-Werror",
        "-Wno-unused-const-variable",
    ],
    deps = [
        "//cuttlefish/common/libs/fs",
        "//cuttlefish/common/libs/utils:files",
        "//cuttlefish/host/commands/modem_simulator:command_parser",
        "//cuttlefish/host/commands/modem_simulator:device_config",
        "//cuttlefish/host/commands/modem_simulator:modem_technology",
        "//cuttlefish/host/commands/modem_simulator:pdu_parser",
        "//cuttlefish/host/commands/modem_simulator:thread_looper",
        "//cuttlefish/host/libs/config:cuttlefish_config",
        "//libbase",
        "@jsoncpp",
        "@tinyxml2",
    ],
)

cf_cc_binary(
    name = "modem_simulator",
    srcs = [
        "main.cpp",
    ],
    deps = [
        ":modem_simulator_lib",
        "//cuttlefish/common/libs/fs",
        "//cuttlefish/common/libs/utils:tee_logging",
        "//cuttlefish/host/libs/config:cuttlefish_config",
        "//libbase",
        "@fmt",
        "@gflags",
    ],
)

cf_cc_library(
    name = "modem_technology",
    hdrs = ["modem_technology.h"],
)

cf_cc_library(
    name = "pdu_parser",
    srcs = ["pdu_parser.cpp"],
    hdrs = ["pdu_parser.h"],
)

cf_cc_test(
    name = "pdu_parser_test",
    srcs = ["unittest/pdu_parser_test.cpp"],
    deps = [
        "//cuttlefish/host/commands/modem_simulator:pdu_parser",
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)

cf_cc_test(
    name = "service_test",
    srcs = [
        "unittest/iccfile.h",
        "unittest/service_test.cpp",
    ],
    deps = [
        "//cuttlefish/common/libs/fs",
        "//cuttlefish/common/libs/utils:files",
        "//cuttlefish/host/commands/assemble_cvd:flags_defaults",
        "//cuttlefish/host/commands/modem_simulator:device_config",
        "//cuttlefish/host/commands/modem_simulator:modem_simulator_lib",
        "//cuttlefish/host/libs/config:cuttlefish_config",
        "//libbase",
        "@gflags",
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)

cf_cc_library(
    name = "thread_looper",
    srcs = ["thread_looper.cpp"],
    hdrs = ["thread_looper.h"],
    deps = [
        "//libbase",
    ],
)
