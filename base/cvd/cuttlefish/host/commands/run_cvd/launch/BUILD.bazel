load("//:build_variables.bzl", "COPTS")
load("//tools/lint:linters.bzl", "clang_tidy_test")

package(
    default_visibility = ["//:android_cuttlefish"],
)

cc_library(
    name = "auto_cmd",
    hdrs = ["auto_cmd.h"],
    copts = COPTS,
    deps = [
        "//cuttlefish/common/libs/utils",
        "//cuttlefish/common/libs/utils:result",
        "//cuttlefish/host/libs/config",
        "//libbase",
        "@fruit",
    ],
)

clang_tidy_test(
    name = "auto_cmd_clang_tidy",
    srcs = [":auto_cmd"],
    tags = ["clang_tidy", "clang-tidy"],
)

cc_library(
    name = "snapshot_control_files",
    srcs = ["snapshot_control_files.cpp"],
    hdrs = ["snapshot_control_files.h"],
    copts = COPTS,
    deps = [
        "//cuttlefish/common/libs/fs",
        "//cuttlefish/common/libs/utils:result",
        "//cuttlefish/host/libs/config",
        "@fruit",
    ],
)

clang_tidy_test(
    name = "snapshot_control_files_clang_tidy",
    srcs = [":snapshot_control_files"],
    tags = ["clang_tidy", "clang-tidy"],
)

cc_library(
    name = "webrtc_controller",
    srcs = ["webrtc_controller.cpp"],
    hdrs = ["webrtc_controller.h"],
    copts = COPTS,
    deps = [
        "//cuttlefish/common/libs/fs",
        "//cuttlefish/common/libs/utils:result",
        "//cuttlefish/host/frontend/webrtc:libcuttlefish_webrtc_command_channel",
        "//cuttlefish/host/frontend/webrtc:libcuttlefish_webrtc_commands_proto",
        "//cuttlefish/host/libs/config",
        "//libbase",
        "@fruit",
        "@googleapis//google/rpc:code_cc_proto",
    ],
)

clang_tidy_test(
    name = "webrtc_controller_clang_tidy",
    srcs = [":webrtc_controller"],
    tags = ["clang_tidy", "clang-tidy"],
)

cc_library(
    name = "launch",
    srcs = [
        "automotive_proxy.cpp",
        "bluetooth_connector.cpp",
        "casimir.cpp",
        "casimir_control_server.cpp",
        "console_forwarder.cpp",
        "control_env_proxy_server.cpp",
        "echo_server.cpp",
        "gnss_grpc_proxy.cpp",
        "grpc_socket_creator.cpp",
        "grpc_socket_creator.h",
        "input_connections_provider.h",
        "kernel_log_monitor.cpp",
        "launch.h",
        "log_tee_creator.cpp",
        "log_tee_creator.h",
        "logcat_receiver.cpp",
        "mcu.cpp",
        "metrics.cpp",
        "modem.cpp",
        "netsim_server.cpp",
        "nfc_connector.cpp",
        "open_wrt.cpp",
        "openwrt_control_server.cpp",
        "pica.cpp",
        "root_canal.cpp",
        "screen_recording_server.cpp",
        "secure_env.cpp",
        "sensors_simulator.cpp",
        "sensors_socket_pair.cpp",
        "sensors_socket_pair.h",
        "streamer.cpp",
        "ti50_emulator.cpp",
        "tombstone_receiver.cpp",
        "uwb_connector.cpp",
        "vhal_proxy_server.cpp",
        "vhost_device_vsock.cpp",
        "vhost_device_vsock.h",
        "vhost_input_devices.cpp",
        "wmediumd_server.cpp",
        "wmediumd_server.h",
    ],
    hdrs = [
        "launch.h",
    ],
    copts = COPTS,
    deps = [
        "//cuttlefish/common/libs/fs",
        "//cuttlefish/common/libs/transport",
        "//cuttlefish/common/libs/utils",
        "//cuttlefish/common/libs/utils:environment",
        "//cuttlefish/common/libs/utils:result",
        "//cuttlefish/host/commands/run_cvd:reporting",
        "//cuttlefish/host/commands/run_cvd/launch:auto_cmd",
        "//cuttlefish/host/commands/run_cvd/launch:snapshot_control_files",
        "//cuttlefish/host/commands/run_cvd/launch:webrtc_controller",
        "//cuttlefish/host/frontend/webrtc:libcuttlefish_webrtc_command_channel",
        "//cuttlefish/host/frontend/webrtc:libcuttlefish_webrtc_commands_proto",
        "//cuttlefish/host/libs/command_util",
        "//cuttlefish/host/libs/config",
        "//cuttlefish/host/libs/vhal_proxy_server",
        "//cuttlefish/host/libs/vm_manager",
        "//libbase",
        "@fmt",
        "@fruit",
        "@googleapis//google/rpc:code_cc_proto",
        "@jsoncpp",
    ],
)

clang_tidy_test(
    name = "launch_clang_tidy",
    srcs = [":launch"],
    tags = ["clang_tidy", "clang-tidy"],
)
