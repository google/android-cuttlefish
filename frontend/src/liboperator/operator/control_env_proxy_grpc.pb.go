// Copyright (C) 2023 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: control_env_proxy.proto

package operator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ControlEnvProxyService_CallUnaryMethod_FullMethodName = "/controlenvproxyserver.ControlEnvProxyService/CallUnaryMethod"
)

// ControlEnvProxyServiceClient is the client API for ControlEnvProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlEnvProxyServiceClient interface {
	CallUnaryMethod(ctx context.Context, in *CallUnaryMethodRequest, opts ...grpc.CallOption) (*CallUnaryMethodReply, error)
}

type controlEnvProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlEnvProxyServiceClient(cc grpc.ClientConnInterface) ControlEnvProxyServiceClient {
	return &controlEnvProxyServiceClient{cc}
}

func (c *controlEnvProxyServiceClient) CallUnaryMethod(ctx context.Context, in *CallUnaryMethodRequest, opts ...grpc.CallOption) (*CallUnaryMethodReply, error) {
	out := new(CallUnaryMethodReply)
	err := c.cc.Invoke(ctx, ControlEnvProxyService_CallUnaryMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlEnvProxyServiceServer is the server API for ControlEnvProxyService service.
// All implementations must embed UnimplementedControlEnvProxyServiceServer
// for forward compatibility
type ControlEnvProxyServiceServer interface {
	CallUnaryMethod(context.Context, *CallUnaryMethodRequest) (*CallUnaryMethodReply, error)
	mustEmbedUnimplementedControlEnvProxyServiceServer()
}

// UnimplementedControlEnvProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControlEnvProxyServiceServer struct {
}

func (UnimplementedControlEnvProxyServiceServer) CallUnaryMethod(context.Context, *CallUnaryMethodRequest) (*CallUnaryMethodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallUnaryMethod not implemented")
}
func (UnimplementedControlEnvProxyServiceServer) mustEmbedUnimplementedControlEnvProxyServiceServer() {
}

// UnsafeControlEnvProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlEnvProxyServiceServer will
// result in compilation errors.
type UnsafeControlEnvProxyServiceServer interface {
	mustEmbedUnimplementedControlEnvProxyServiceServer()
}

func RegisterControlEnvProxyServiceServer(s grpc.ServiceRegistrar, srv ControlEnvProxyServiceServer) {
	s.RegisterService(&ControlEnvProxyService_ServiceDesc, srv)
}

func _ControlEnvProxyService_CallUnaryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallUnaryMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlEnvProxyServiceServer).CallUnaryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlEnvProxyService_CallUnaryMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlEnvProxyServiceServer).CallUnaryMethod(ctx, req.(*CallUnaryMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlEnvProxyService_ServiceDesc is the grpc.ServiceDesc for ControlEnvProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlEnvProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlenvproxyserver.ControlEnvProxyService",
	HandlerType: (*ControlEnvProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallUnaryMethod",
			Handler:    _ControlEnvProxyService_CallUnaryMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_env_proxy.proto",
}
