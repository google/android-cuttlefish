// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: control_env_proxy.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlEnvProxyServiceClient is the client API for ControlEnvProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlEnvProxyServiceClient interface {
	CallUnaryMethod(ctx context.Context, in *CallUnaryMethodRequest, opts ...grpc.CallOption) (*CallUnaryMethodReply, error)
	ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListServicesReply, error)
	ListMethods(ctx context.Context, in *ListMethodsRequest, opts ...grpc.CallOption) (*ListMethodsReply, error)
	ListReqResType(ctx context.Context, in *ListReqResTypeRequest, opts ...grpc.CallOption) (*ListReqResTypeReply, error)
	TypeInformation(ctx context.Context, in *TypeInformationRequest, opts ...grpc.CallOption) (*TypeInformationReply, error)
}

type controlEnvProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlEnvProxyServiceClient(cc grpc.ClientConnInterface) ControlEnvProxyServiceClient {
	return &controlEnvProxyServiceClient{cc}
}

func (c *controlEnvProxyServiceClient) CallUnaryMethod(ctx context.Context, in *CallUnaryMethodRequest, opts ...grpc.CallOption) (*CallUnaryMethodReply, error) {
	out := new(CallUnaryMethodReply)
	err := c.cc.Invoke(ctx, "/controlenvproxyserver.ControlEnvProxyService/CallUnaryMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlEnvProxyServiceClient) ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListServicesReply, error) {
	out := new(ListServicesReply)
	err := c.cc.Invoke(ctx, "/controlenvproxyserver.ControlEnvProxyService/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlEnvProxyServiceClient) ListMethods(ctx context.Context, in *ListMethodsRequest, opts ...grpc.CallOption) (*ListMethodsReply, error) {
	out := new(ListMethodsReply)
	err := c.cc.Invoke(ctx, "/controlenvproxyserver.ControlEnvProxyService/ListMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlEnvProxyServiceClient) ListReqResType(ctx context.Context, in *ListReqResTypeRequest, opts ...grpc.CallOption) (*ListReqResTypeReply, error) {
	out := new(ListReqResTypeReply)
	err := c.cc.Invoke(ctx, "/controlenvproxyserver.ControlEnvProxyService/ListReqResType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlEnvProxyServiceClient) TypeInformation(ctx context.Context, in *TypeInformationRequest, opts ...grpc.CallOption) (*TypeInformationReply, error) {
	out := new(TypeInformationReply)
	err := c.cc.Invoke(ctx, "/controlenvproxyserver.ControlEnvProxyService/TypeInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlEnvProxyServiceServer is the server API for ControlEnvProxyService service.
// All implementations must embed UnimplementedControlEnvProxyServiceServer
// for forward compatibility
type ControlEnvProxyServiceServer interface {
	CallUnaryMethod(context.Context, *CallUnaryMethodRequest) (*CallUnaryMethodReply, error)
	ListServices(context.Context, *emptypb.Empty) (*ListServicesReply, error)
	ListMethods(context.Context, *ListMethodsRequest) (*ListMethodsReply, error)
	ListReqResType(context.Context, *ListReqResTypeRequest) (*ListReqResTypeReply, error)
	TypeInformation(context.Context, *TypeInformationRequest) (*TypeInformationReply, error)
	mustEmbedUnimplementedControlEnvProxyServiceServer()
}

// UnimplementedControlEnvProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControlEnvProxyServiceServer struct {
}

func (UnimplementedControlEnvProxyServiceServer) CallUnaryMethod(context.Context, *CallUnaryMethodRequest) (*CallUnaryMethodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallUnaryMethod not implemented")
}
func (UnimplementedControlEnvProxyServiceServer) ListServices(context.Context, *emptypb.Empty) (*ListServicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedControlEnvProxyServiceServer) ListMethods(context.Context, *ListMethodsRequest) (*ListMethodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMethods not implemented")
}
func (UnimplementedControlEnvProxyServiceServer) ListReqResType(context.Context, *ListReqResTypeRequest) (*ListReqResTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReqResType not implemented")
}
func (UnimplementedControlEnvProxyServiceServer) TypeInformation(context.Context, *TypeInformationRequest) (*TypeInformationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeInformation not implemented")
}
func (UnimplementedControlEnvProxyServiceServer) mustEmbedUnimplementedControlEnvProxyServiceServer() {
}

// UnsafeControlEnvProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlEnvProxyServiceServer will
// result in compilation errors.
type UnsafeControlEnvProxyServiceServer interface {
	mustEmbedUnimplementedControlEnvProxyServiceServer()
}

func RegisterControlEnvProxyServiceServer(s grpc.ServiceRegistrar, srv ControlEnvProxyServiceServer) {
	s.RegisterService(&ControlEnvProxyService_ServiceDesc, srv)
}

func _ControlEnvProxyService_CallUnaryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallUnaryMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlEnvProxyServiceServer).CallUnaryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controlenvproxyserver.ControlEnvProxyService/CallUnaryMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlEnvProxyServiceServer).CallUnaryMethod(ctx, req.(*CallUnaryMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlEnvProxyService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlEnvProxyServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controlenvproxyserver.ControlEnvProxyService/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlEnvProxyServiceServer).ListServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlEnvProxyService_ListMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlEnvProxyServiceServer).ListMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controlenvproxyserver.ControlEnvProxyService/ListMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlEnvProxyServiceServer).ListMethods(ctx, req.(*ListMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlEnvProxyService_ListReqResType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReqResTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlEnvProxyServiceServer).ListReqResType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controlenvproxyserver.ControlEnvProxyService/ListReqResType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlEnvProxyServiceServer).ListReqResType(ctx, req.(*ListReqResTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlEnvProxyService_TypeInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlEnvProxyServiceServer).TypeInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controlenvproxyserver.ControlEnvProxyService/TypeInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlEnvProxyServiceServer).TypeInformation(ctx, req.(*TypeInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlEnvProxyService_ServiceDesc is the grpc.ServiceDesc for ControlEnvProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlEnvProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlenvproxyserver.ControlEnvProxyService",
	HandlerType: (*ControlEnvProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallUnaryMethod",
			Handler:    _ControlEnvProxyService_CallUnaryMethod_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _ControlEnvProxyService_ListServices_Handler,
		},
		{
			MethodName: "ListMethods",
			Handler:    _ControlEnvProxyService_ListMethods_Handler,
		},
		{
			MethodName: "ListReqResType",
			Handler:    _ControlEnvProxyService_ListReqResType_Handler,
		},
		{
			MethodName: "TypeInformation",
			Handler:    _ControlEnvProxyService_TypeInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_env_proxy.proto",
}
