//
// Copyright (C) 2022 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "host/commands/cvd/unittests/selector/creation_analyzer_test_helper.h"

#include "common/libs/utils/environment.h"
#include "common/libs/utils/users.h"
#include "host/commands/cvd/selector/instance_database_utils.h"
#include "host/commands/cvd/selector/selector_constants.h"

namespace cuttlefish {
namespace selector {
namespace {

std::string TestUserHome() {
  static const std::string home = StringFromEnv("HOME", "");
  if (!home.empty()) {
    return home;
  }
  auto result = SystemWideUserHome();
  return (result.ok() ? *result : "");
}

std::string AutoGeneratedHome(const std::string& subdir) {
  std::string parent(kParentOfDefaultHomeDirectories);
  return parent + "/" + subdir;
}

}  // namespace

auto home_test_inputs = testing::Values(
    InputOutput{
        .cmd_args = "cvd start --daemon",
        .selector_args = "--device_name=cf-1",
        .android_host_out = "/home/user/download",
        .home = "/usr/local/home/_fake_user",
        .expected_output =
            Expected{.output = OutputInfo{.home = "/usr/local/home/_fake_user",
                                          .host_artifacts_path =
                                              "/home/user/download"},
                     .is_success = true}},
    InputOutput{
        .cmd_args = "cvd start --daemon",
        .selector_args = "--device_name=cf-1",
        .android_host_out = "/home/user/download",
        .home = TestUserHome(),
        .expected_output =
            Expected{.output = OutputInfo{.home = AutoGeneratedHome("cf"),
                                          .host_artifacts_path =
                                              "/home/user/download"},
                     .is_success = true}},
    InputOutput{
        .cmd_args = "cvd start --daemon",
        .selector_args = "--device_name=cf-1",
        .android_host_out = "/home/user/download",
        /* undefined HOME */
        .expected_output = Expected{
            .output = OutputInfo{.home = AutoGeneratedHome("cf"),
                                 .host_artifacts_path = "/home/user/download"},
            .is_success = true}});

TEST_P(HomeTest, HomeTest) {
  if (TestUserHome().empty()) {
    /*
     * If $HOME is the same as the real home directory (i.e. HOME is not
     * overridden), cvd uses an automatically generated path in place of
     * HOME when the operation is "start".
     *
     * Otherwise, for backward compatibility, cvd respects the overridden
     * HOME.
     *
     * In testing that feature, if we cannot get the real home directory,
     * the testing is not possible.
     */
    GTEST_SKIP() << "$HOME should be available for this set of tests.";
  }
  auto param = CreationAnalyzer::CreationAnalyzerParam{
      .cmd_args = cmd_args_, .envs = envs_, .selector_args = selector_args_};

  auto result = CreationAnalyzer::Analyze(param, credential_,
                                          instance_lock_file_manager_);

  ASSERT_EQ(result.ok(), expected_success_) << result.error().Trace();
  if (!expected_success_) {
    return;
  }
  ASSERT_EQ(result->home, expected_output_.home);
}

INSTANTIATE_TEST_SUITE_P(CvdCreationInfo, HomeTest, home_test_inputs);

auto host_out_test_inputs = testing::Values(
    InputOutput{.cmd_args = "cvd start --daemon",
                .selector_args = "--device_name=cf-1",
                .android_host_out = "/home/user/download",
                .home = "/home/fake_user",
                .expected_output =
                    Expected{.output = OutputInfo{.home = "/home/fake_user",
                                                  .host_artifacts_path =
                                                      "/home/user/download"},
                             .is_success = true}},
    InputOutput{.cmd_args = "cvd start --daemon",
                .selector_args = "--device_name=cf-1",
                /* missing ANDROID_HOST_OUT */
                .home = "/home/fake_user",
                .expected_output =
                    Expected{.output = OutputInfo{.home = "/home/fake_user"},
                             .is_success = false}});

TEST_P(HostArtifactsTest, HostArtifactsTest) {
  auto param = CreationAnalyzer::CreationAnalyzerParam{
      .cmd_args = cmd_args_, .envs = envs_, .selector_args = selector_args_};

  auto result = CreationAnalyzer::Analyze(param, credential_,
                                          instance_lock_file_manager_);

  ASSERT_EQ(result.ok(), expected_success_) << result.error().Trace();
  if (!expected_success_) {
    return;
  }
  ASSERT_EQ(result->host_artifacts_path, expected_output_.host_artifacts_path);
}

INSTANTIATE_TEST_SUITE_P(CvdCreationInfo, HostArtifactsTest,
                         host_out_test_inputs);

}  // namespace selector
}  // namespace cuttlefish
