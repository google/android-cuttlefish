//
// Copyright (C) 2020 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {
    default_applicable_licenses: ["Android-Apache-2.0"],
}

cc_defaults {
    name: "secure_env_defaults",
    shared_libs: [
        "libext2_blkid",
        "libbase",
        "libcppbor_external",
        "libcppcose_rkp",
        "libcuttlefish_security",
        "libgatekeeper",
        "libjsoncpp",
        "libkeymaster_portable",
        "libkeymaster_messages",
        "libsoft_attestation_cert",
        "liblog",
        "libcrypto",
        "libcutils",
        "libpuresoftkeymasterdevice_host",
        "tpm2-tss2-esys",
        "tpm2-tss2-mu",
        "tpm2-tss2-rc",
        "tpm2-tss2-tcti",
    ],
    static_libs: [
        "libc++_static",
        "libscrypt_static",
        "ms-tpm-20-ref-lib",
    ],
    cflags: [
        "-fno-rtti", // Required for libkeymaster_portable
    ],
    target: {
        not_windows: {
            static_libs: [
                "libcuttlefish_host_config",
            ],
            shared_libs: [
                "libcuttlefish_fs",
                "libcuttlefish_kernel_log_monitor_utils",
                "libcuttlefish_utils",
                "libfruit",
            ],
        },
        windows: {
            cflags: [
                "-DNOGDI",
            ],
        },
    },
}

common_libsecure_srcs = [
        "composite_serialization.cpp",
        "encrypted_serializable.cpp",
        "fragile_tpm_storage.cpp",
        "gatekeeper_responder.cpp",
        "hmac_serializable.cpp",
        "in_process_tpm.cpp",
        "insecure_fallback_storage.cpp",
        "json_serializable.cpp",
        "keymaster_responder.cpp",
        "primary_key_builder.cpp",
        "tpm_attestation_record.cpp",
        "tpm_auth.cpp",
        "tpm_commands.cpp",
        "tpm_encrypt_decrypt.cpp",
        "tpm_ffi.cpp",
        "tpm_gatekeeper.cpp",
        "tpm_hmac.cpp",
        "tpm_key_blob_maker.cpp",
        "tpm_keymaster_context.cpp",
        "tpm_keymaster_enforcement.cpp",
        "tpm_random_source.cpp",
        "tpm_remote_provisioning_context.cpp",
        "tpm_resource_manager.cpp",
        "tpm_serialize.cpp",
]

cc_library_host_static {
    name: "libsecure_env_linux",
    srcs: common_libsecure_srcs + [
        "confui_sign_server.cpp",
        "device_tpm.cpp",
    ],
    defaults: ["cuttlefish_buildhost_only", "secure_env_defaults"],
}

// Rust FFI bindings to access TPM-specific functionality in C/C++.
rust_bindgen_host {
    name: "libsecure_env_tpm",
    source_stem: "libsecure_env_tpm",
    crate_name: "secure_env_tpm",
    wrapper_src: "tpm_ffi.h",
    vendor_available: true,
    static_libs: [
        "libsecure_env_linux",
    ],
    defaults: [
        "cuttlefish_buildhost_only",
        "secure_env_defaults",
    ],
}

cc_binary_host {
    name: "secure_env",
    srcs: [
        "secure_env.cpp",
    ],
    static_libs: [
        "libsecure_env_linux",
        "libgflags",
    ],
    shared_libs: [
        "libkmr_cf_ffi",
    ],
    defaults: [
        "cuttlefish_buildhost_only",
        "secure_env_defaults",
    ],
}

cc_library {
    name: "libsecure_env_win",
    srcs: common_libsecure_srcs + [
        "secure_env_windows_lib.cpp",
    ],
    header_libs: [
        "cuttlefish_common_headers",
    ],
    target: {
        windows: {
            enabled: true,
        },
        not_windows: {
            enabled: false,
        },
        host: {
            compile_multilib: "64",
        },
    },
    device_supported: false,
    host_supported: true,
    defaults: ["secure_env_defaults"],
 }

cc_test_host {
    name: "libsecure_env_test",
    srcs: [
        "test_tpm.cpp",
        "encrypted_serializable_test.cpp",
    ],
    static_libs: [
        "libsecure_env_linux",
    ],
    defaults: ["cuttlefish_buildhost_only", "secure_env_defaults"],
    test_options: {
        unit_test: true,
    },
}
